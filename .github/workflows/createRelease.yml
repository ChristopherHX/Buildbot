name: CreateRelease

on:
  workflow_dispatch:
    inputs:
      msa:
        description: 'Which msa to bundle and check for updates'
        required: true
        default: master
      mcpelauncher:
        description: 'Which mcpelauncher to bundle'
        required: true
        default: ng
      mcpelauncher-ui:
        description: 'Which mcpelauncher-ui to bundle'
        required: true
        default: ng
      mcpelauncher-qt6:
        description: 'Which mcpelauncher-qt6 to bundle'
        required: true
        default: qt6
      mcpelauncher-ui-qt6:
        description: 'Which mcpelauncher-ui-qt6 to bundle'
        required: true
        default: qt6
      versiondb:
        description: 'Which versiondb to bundle and check for updates'
        required: true
        default: master
      changelog:
        description: 'Changelog of this Release'
        required: true
      versionname:
        description: 'Name / tag of this Release'
        required: true
      version-code-offset:
        default: "22"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          echo "$KEY1" > privatekey.pem
          ssh-keygen -y -f privatekey.pem
          echo "$KEY2" > privatekey.pem
          ssh-keygen -y -f privatekey.pem
          echo "$KEY3" > privatekey.pem
          ssh-keygen -y -f privatekey.pem
          rm privatekey.pem
        env:
          KEY1: ${{ secrets.SSH_PRIVATE_KEY }}
          KEY2: ${{ secrets.SSH_PRIVATE_KEY2 }}
          KEY3: ${{ secrets.SSH_PRIVATE_KEY3 }}
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
            ${{ secrets.SSH_PRIVATE_KEY2 }}
            ${{ secrets.SSH_PRIVATE_KEY3 }}
      - name: setup git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: osx 1/3
        run: |
          git clone git@github.com:christopherhx/osx-packaging-scripts.git
          pushd osx-packaging-scripts
          echo ${{ github.event.inputs.versiondb }} > versionsdbremote.txt
          echo "${{ github.event.inputs.changelog }}" > changelog.txt
          echo '${{ github.event.inputs.versionname }}' > version.txt
          popd
      - name: osx 2/3
        shell: python
        run: |
          from subprocess import check_output, check_call, DEVNULL
          import tempfile

          def GetCommitSha(url, ref):
              with tempfile.TemporaryDirectory() as directory:
                  check_call(['git', 'init'], cwd=directory, stdout=DEVNULL, stderr=DEVNULL)
                  check_call(['git', 'remote', 'add', 'origin', url], cwd=directory)
                  res = check_output(["git", "ls-remote", "origin", ref], cwd=directory).split(b'\t')[0].decode("utf-8")
                  if len(res) == 0:
                      return ref
                  return res
          def writeCommit(file, url, ref):
              with open(file, 'w') as file:
                  file.write(GetCommitSha(url, ref))
         
          writeCommit('osx-packaging-scripts/msa.commit', 'https://github.com/minecraft-linux/msa-manifest.git', '${{ github.event.inputs.msa }}')
          writeCommit('osx-packaging-scripts/mcpelauncher.commit', 'https://github.com/minecraft-linux/mcpelauncher-manifest.git', '${{ github.event.inputs.mcpelauncher }}')
          writeCommit('osx-packaging-scripts/mcpelauncher-ui.commit', 'https://github.com/minecraft-linux/mcpelauncher-ui-manifest.git', '${{ github.event.inputs.mcpelauncher-ui }}')
          writeCommit('osx-packaging-scripts/versionsdb.txt', 'https://github.com/minecraft-linux/mcpelauncher-versiondb.git', '${{ github.event.inputs.versiondb }}')
      - name: osx 3/3
        run: |
          pushd osx-packaging-scripts
          git add .
          git commit -m "Release ${{ github.event.inputs.versionname }} via Buildbot"
          git push origin HEAD:release/${{ github.event.inputs.versionname }}
          popd
      - name: linux-AppImage 1/3
        run: |
          git clone git@github.com:christopherhx/linux-packaging-scripts.git
          pushd linux-packaging-scripts
          echo ${{ github.event.inputs.versiondb }} > versionsdbremote.txt
          echo "${{ github.event.inputs.changelog }}" > changelog.txt
          echo '${{ github.event.inputs.versionname }}' > version.txt
          popd
      - name: linux-AppImage 2/3
        shell: python
        run: |
          from subprocess import check_output, check_call, DEVNULL
          import tempfile

          def GetCommitSha(url, ref):
              with tempfile.TemporaryDirectory() as directory:
                  check_call(['git', 'init'], cwd=directory, stdout=DEVNULL, stderr=DEVNULL)
                  check_call(['git', 'remote', 'add', 'origin', url], cwd=directory)
                  res = check_output(["git", "ls-remote", "origin", ref], cwd=directory).split(b'\t')[0].decode("utf-8")
                  if len(res) == 0:
                      return ref
                  return res
          def writeCommit(file, url, ref):
              with open(file, 'w') as file:
                  file.write(GetCommitSha(url, ref))
         
          writeCommit('linux-packaging-scripts/msa.commit', 'https://github.com/minecraft-linux/msa-manifest.git', '${{ github.event.inputs.msa }}')
          writeCommit('linux-packaging-scripts/mcpelauncher.commit', 'https://github.com/minecraft-linux/mcpelauncher-manifest.git', '${{ github.event.inputs.mcpelauncher }}')
          writeCommit('linux-packaging-scripts/mcpelauncher-ui.commit', 'https://github.com/minecraft-linux/mcpelauncher-ui-manifest.git', '${{ github.event.inputs.mcpelauncher-ui }}')
          writeCommit('linux-packaging-scripts/versionsdb.txt', 'https://github.com/minecraft-linux/mcpelauncher-versiondb.git', '${{ github.event.inputs.versiondb }}')
      - name: linux-AppImage 3/3
        run: |
          pushd linux-packaging-scripts
          git add .
          git commit -m "Release ${{ github.event.inputs.versionname }} via Buildbot"
          git push origin HEAD:release/${{ github.event.inputs.versionname }}
          popd
      - name: linux-flatpak-clone
        run: |
          git clone https://github.com/flathub/io.mrarm.mcpelauncher.git
          pushd io.mrarm.mcpelauncher
          git remote set-url origin git@github.com:minecraft-linux/io.mrarm.mcpelauncher.git
          popd
      - name: Update jsons
        shell: python
        run: |
          import json
          from subprocess import check_output, check_call, DEVNULL
          import tempfile
          import xml.etree.ElementTree as ET
          import datetime
          from itertools import filterfalse

          def GetCommitSha(url, ref):
              with tempfile.TemporaryDirectory() as directory:
                  check_call(['git', 'init'], cwd=directory, stdout=DEVNULL, stderr=DEVNULL)
                  check_call(['git', 'remote', 'add', 'origin', url], cwd=directory)
                  res = check_output(["git", "ls-remote", "origin", ref], cwd=directory).split(b'\t')[0].decode("utf-8")
                  if len(res) == 0:
                      return ref
                  return res

          def UpdateSource(source, url, ref):
              if source['type'] == 'git' and source['url'] == url:
                  source['commit'] = GetCommitSha(url, ref)

          obj=json.load(open('io.mrarm.mcpelauncher/io.mrarm.mcpelauncher.json'))
          for module in obj['modules']:
              for source in module['sources']:
                  # UpdateSource(source, 'https://github.com/minecraft-linux/msa-manifest.git', '${{ github.event.inputs.msa }}')
                  UpdateSource(source, 'https://github.com/minecraft-linux/mcpelauncher-manifest.git', '${{ github.event.inputs.mcpelauncher-qt6 }}')
                  UpdateSource(source, 'https://github.com/minecraft-linux/mcpelauncher-versiondb.git', '${{ github.event.inputs.versiondb }}')
                  mcpeui = 'https://github.com/minecraft-linux/mcpelauncher-ui-manifest.git'
                  UpdateSource(source, mcpeui, '${{ github.event.inputs.mcpelauncher-ui-qt6 }}')
                  if source['type'] == 'git' and source['url'] == mcpeui:
                      module['build-options']['config-opts'][:] = filterfalse(lambda x: x.startswith('-DLAUNCHER_VERSION_NAME=') or x.startswith('-DLAUNCHER_VERSION_CODE=') or x.startswith('-DLAUNCHER_CHANGE_LOG=') or x.startswith('-DLAUNCHER_VERSIONDB_URL='), module['build-options']['config-opts'])
                      module['build-options']['config-opts'] += ['-DLAUNCHER_VERSION_NAME=${{ github.event.inputs.versionname }}', '-DLAUNCHER_VERSION_CODE=' + str(${{ github.event.inputs.version-code-offset }} + ${{ github.run_number }}), "-DLAUNCHER_CHANGE_LOG=${{ github.event.inputs.changelog }}", '-DLAUNCHER_VERSIONDB_URL=https://raw.githubusercontent.com/minecraft-linux/mcpelauncher-versiondb/${{ github.event.inputs.versiondb }}']

          json.dump(obj, open('io.mrarm.mcpelauncher/io.mrarm.mcpelauncher.json', 'w'), indent=4)

          tree = ET.parse('io.mrarm.mcpelauncher/io.mrarm.mcpelauncher.metainfo.xml')
          root = tree.getroot()
          releases = root.find('releases')
          rel = ET.Element('release')
          releases.insert(0, rel)
          rel.set('version', '${{ github.event.inputs.versionname }}')
          rel.set('date', datetime.date.today().isoformat())
          rel.append(ET.fromstring("<description>${{ github.event.inputs.changelog }}</description>"))
          ET.indent(tree, space='    ')
          tree.write('io.mrarm.mcpelauncher/io.mrarm.mcpelauncher.metainfo.xml', encoding='utf-8', xml_declaration=True)
      - name: linux-flatpak-push-commit
        run: |
          pushd io.mrarm.mcpelauncher
          git add .
          git commit -m "Release ${{ github.event.inputs.versionname }} via Buildbot"
          git push origin HEAD:release/${{ github.event.inputs.versionname }}
          popd
