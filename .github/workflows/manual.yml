name: Manual Build
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      mcpelauncher-manifest-repo:
        description: 'mcpelauncher repo'
        default: 'https://github.com/minecraft-linux/mcpelauncher-manifest.git'
      mcpelauncher-manifest-ref:
        description: 'mcpelauncher ref'
        default: 'main'
      mcpelauncher-ui-manifest-repo:
        description: 'mcpelauncher ui repo'
        default: 'https://github.com/minecraft-linux/mcpelauncher-ui-manifest.git'
      mcpelauncher-ui-manifest-ref:
        description: 'mcpelauncher ref'
        default: 'main'
      release:
        description: 'Is this a full release'
        default: '0'
      
jobs:
  openssl:
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        include:
          - OS: ubuntu-latest
            arch: 'x86_64'
            opensslflags: linux-x86_64
          - OS: ubuntu-latest
            deps: sudo apt install -y gcc-multilib
            arch: 'i386'
            opensslflags: linux-i386
          - OS: macos-latest
            version: '10.10'
            sdkroot: ${{ github.workspace }}/../MacOSX-SDKs/MacOSX10.10.sdk
            arch: 'x86_64'
            opensslflags: darwin64-x86_64-clang
          - OS: macos-latest
            version: '10.10'
            sdkroot: ${{ github.workspace }}/../MacOSX-SDKs/MacOSX10.10.sdk
            arch: 'i386'
            opensslflags: darwin-i386-clang
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.version }}
      SDKROOT: ${{ matrix.sdkroot }}
    steps:
    - name: Check
      id: cache
      uses: Mystraht/cache@master
      env:
        cache-name: cache-openssl-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-openssl32-macos-10-10
      with:
        path: output
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.cache.outputs.cache-hit != 'true' && startWith(matrix.OS, 'macOS')
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Install Deps
      if: steps.cache.outputs.cache-hit != 'true' && ${{ matrix.deps }} != ''
      run: ${{ matrix.deps }}
    - name: Build OpenSSL
      shell: pwsh
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/openssl/openssl.git -b OpenSSL_1_1_1-stable
        pushd openssl
        $INSDIR = (Get-Location).ToString() + "/output"
        perl ./Configure ${{ matrix.opensslflags }} ('--prefix=' + $INSDIR)
        make install_sw
    - name: Upload Binary
      uses: actions/upload-artifact@v2
      with:
        name: openssl-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
        path: output/
  build:
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        include:
          - AppImage: true
            OS: ubuntu-latest
          - AppImage: false
            OS: ubuntu-latest
    steps:
    - name: Installing Ubuntu dependencies
      shell: pwsh
      env:
        DEBIAN_FRONTEND: noninteractive
      run: sudo apt-get install -y libpng-dev libx11-dev libxi-dev libcurl4-openssl-dev libudev-dev libevdev-dev libegl1-mesa-dev libpulse-dev
    - name: Cloning mcpelauncher ${{ github.event.inputs.mcpelauncher-manifest-repo }}/${{ github.event.inputs.mcpelauncher-manifest-ref }}
      shell: pwsh
      run: git clone --recursive ${{ github.event.inputs.mcpelauncher-manifest-repo }} -b ${{ github.event.inputs.mcpelauncher-manifest-ref }} mcpelauncher
    - name: Building mcpelauncher ${{ github.event.inputs.mcpelauncher-manifest-repo }}/${{ github.event.inputs.mcpelauncher-manifest-ref }}
      shell: pwsh
      env:
        CC: clang
        CXX: clang++
      run: |
        mkdir output
        mkdir build
        $INSDIR = (Get-Location).ToString() + "/output"
        pushd build
        cmake ../mcpelauncher -DCMAKE_BUILD_TYPE=Release -DBUILD_WEBVIEW=OFF ('-DCMAKE_INSTALL_PREFIX=' + $INSDIR)
        make install -j12
        popd
        popd
    - name: Upload Binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.OS }}-Binary
        path: output/
    - name: Building AppImage Binary
      shell: pwsh
      if: ${{ matrix.AppImage }}
      env:
        ARCH: x86_64
        BUILD_NUM: ${GITHUB_RUN_NUMBER}
        OUTPUT: Minecraft_Bedrock_Launcher-x86_64-build-0.AppImage
      run: |
        curl -L https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage --output linuxdeploy.AppImage
        chmod +x linuxdeploy.AppImage
        curl -L https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage --output linuxdeploy-plugin-qt.AppImage
        chmod +x linuxdeploy-plugin-qt.AppImage
        $INSDIR = (Get-Location).ToString() + "/output"
        # ./linuxdeploy-plugin-qt.AppImage --appdir $INSDIR
        ./linuxdeploy.AppImage --appdir ($INSDIR) --output appimage
    - name: Upload AppImage Binary
      if: ${{ matrix.AppImage }}
      uses: actions/upload-artifact@v2
      with:
        name: AppImage
        path: Minecraft_Bedrock_Launcher-*.AppImage
