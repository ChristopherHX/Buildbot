name: Manual Build
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      mcpelauncher-manifest-repo:
        description: 'mcpelauncher repo'
        default: 'https://github.com/minecraft-linux/mcpelauncher-manifest.git'
      mcpelauncher-manifest-ref:
        description: 'mcpelauncher ref'
        default: 'main'
      mcpelauncher-ui-manifest-repo:
        description: 'mcpelauncher ui repo'
        default: 'https://github.com/minecraft-linux/mcpelauncher-ui-manifest.git'
      mcpelauncher-ui-manifest-ref:
        description: 'mcpelauncher ref'
        default: 'main'
      release:
        description: 'Is this a full release'
        default: '0'
      
jobs:
  openssl:
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - OS: ubuntu-latest
            arch: 'x86_64'
            opensslflags: linux-x86_64
          - OS: ubuntu-latest
            deps: sudo apt install -y gcc-multilib
            arch: 'i386'
            opensslflags: linux-x86
          - OS: macos-latest
            version: '10.10'
            sdkroot: ../MacOSX-SDKs/MacOSX10.10.sdk
            arch: 'x86_64'
            opensslflags: darwin64-x86_64-cc
          - OS: macos-latest
            version: '10.10'
            sdkroot: ../MacOSX-SDKs/MacOSX10.10.sdk
            arch: 'i386'
            opensslflags: darwin-i386-cc
          - OS: macos-latest
            deps: sudo xcode-select --switch /Applications/Xcode_12.2.app
            sdkroot: /Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk
            version: '11.0'
            arch: 'arm64'
            opensslflags: darwin64-arm64-cc
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.version }}
      cache-name: cache-openssl-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
    steps:
    - name: Cache openssl
      id: cache
      uses: actions/cache@v2
      with:
        path: output
        key: ${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: ${{ steps.cache.outputs.cache-hit != 'true' && startsWith(matrix.OS, 'macOS') && matrix.sdkroot != '' && !startsWith(matrix.sdkroot, '/') }}
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Install Deps
      if: ${{ steps.cache.outputs.cache-hit != 'true' && matrix.deps != '' }}
      run: ${{ matrix.deps }}
    - name: Build OpenSSL
      if: steps.cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        if ('${{ matrix.sdkroot }}' -ne '') {
          if ('${{ matrix.sdkroot }}'.StartsWith('/')) {
            $Env:SDKROOT = '${{ matrix.sdkroot }}'
          } else {
            $Env:SDKROOT = '${{ github.workspace }}/${{ matrix.sdkroot }}'
          }
        }
        git clone https://github.com/openssl/openssl.git -b OpenSSL_1_1_1-stable
        $INSDIR = (Get-Location).ToString() + "/output"
        pushd openssl
        # Workaround not merged arm64 mac support
        git remote add darwin_arm https://github.com/stuartcarnie/openssl.git
        git pull darwin_arm sgc/darwin64_arm
        perl ./Configure ${{ matrix.opensslflags }} ('--prefix=' + $INSDIR)
        make install_sw
    - name: Upload Binary
      uses: actions/upload-artifact@v2
      with:
        name: openssl-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
        path: output/
  libcpp:
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - OS: macos-latest
            version: '10.10'
            sdkroot: ../MacOSX-SDKs/MacOSX10.10.sdk
            arch: 'x86_64'
          - OS: macos-latest
            version: '10.10'
            sdkroot: ../MacOSX-SDKs/MacOSX10.10.sdk
            arch: 'i386'
            llvmflags: -DLIBCXX_BUILD_32_BITS=ON -DLIBCXXABI_BUILD_32_BITS=ON -DLLVM_BUILD_32_BITS=ON
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.version }}
      cache-name: cache-libcpp-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
    steps:
    - name: Cache libc++
      id: cache
      uses: actions/cache@v2
      with:
        path: output
        key: ${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: ${{ steps.cache.outputs.cache-hit != 'true' && startsWith(matrix.OS, 'macOS') && matrix.sdkroot != '' && !startsWith(matrix.sdkroot, '/') }}
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Install Deps
      if: ${{ steps.cache.outputs.cache-hit != 'true' && matrix.deps != '' }}
      run: ${{ matrix.deps }}
    - name: Build libc++
      if: steps.cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        if ('${{ matrix.sdkroot }}' -ne '') {
          if ('${{ matrix.sdkroot }}'.StartsWith('/')) {
            $Env:SDKROOT = '${{ matrix.sdkroot }}'
          } else {
            $Env:SDKROOT = '${{ github.workspace }}/${{ matrix.sdkroot }}'
          }
        }
        git clone https://github.com/llvm/llvm-project.git llvm -b release/10.x
        $INSDIR = (Get-Location).ToString() + "/output"
        mkdir build
        pushd build
        cmake ../llvm/llvm -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_TOOLS=False -DLLVM_INCLUDE_TOOLS=False -DLLVM_INCLUDE_EXAMPLES=False -DLLVM_INCLUDE_TESTS=False -DLLVM_INCLUDE_DOCS=False -DLLVM_ENABLE_OCAMLDOC=False ('-DCMAKE_INSTALL_PREFIX=' + $INSDIR) ${{ matrix.llvmflags}}
        make install-cxx install-cxxabi -j4
    - name: Upload Binary
      uses: actions/upload-artifact@v2
      with:
        name: libcpp-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
        path: output/
  angle:
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - OS: macos-latest
            version: '10.10'
            sdkroot: ../MacOSX-SDKs/MacOSX10.12.sdk
            arch: 'x64'
          - OS: macos-latest
            version: '10.10'
            sdkroot: ../MacOSX-SDKs/MacOSX10.12.sdk
            arch: 'x86'
          - OS: macos-latest
            deps: |
              sudo xcode-select --switch /Applications/Xcode_12.2.app
              # tell angle it is 10.16 instead of 11.0
              sudo ln -s /Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk /Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.16.sdk
            sdkroot: /Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.16.sdk
            version: '10.16'
            arch: 'arm64'
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.version }}
      cache-name: cache-angle-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
    steps:
    - name: Cache angle
      id: cache
      uses: actions/cache@v2
      with:
        path: output
        key: ${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: ${{ steps.cache.outputs.cache-hit != 'true' && startsWith(matrix.OS, 'macOS') && matrix.sdkroot != '' && !startsWith(matrix.sdkroot, '/') }}
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Install Deps
      if: ${{ steps.cache.outputs.cache-hit != 'true' && matrix.deps != '' }}
      run: ${{ matrix.deps }}
    - name: Build angle
      if: steps.cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        if ('${{ matrix.sdkroot }}' -ne '') {
          if ('${{ matrix.sdkroot }}'.StartsWith('/')) {
            $Env:SDKROOT = '${{ matrix.sdkroot }}'
          } else {
            $Env:SDKROOT = '${{ github.workspace }}/${{ matrix.sdkroot }}'
          }
        }
        $INSDIR = (Get-Location).ToString() + "/output"
        mkdir $INSDIR
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        $Env:PATH = $Env:PATH + ':' + $PWD.ToString() + '/depot_tools'
        git clone https://github.com/minecraft-linux/angle.git
        pushd angle
        python scripts/bootstrap.py
        gclient sync
        $configFiles = Get-ChildItem ./build *.gn -rec
        foreach ($file in $configFiles) {
            (Get-Content $file.PSPath) |
            Foreach-Object { $_ -replace "-fatal_warnings", "" -replace "-Wdeprecated-declarations","" -replace "-Werror","" } |
            Set-Content $file.PSPath
        }
        $Env:CFLAGS = '-DGL_SILENCE_DEPRECATION'
        $Env:CXXFLAGS = '-DGL_SILENCE_DEPRECATION'
        $Env:OBJCFLAGS = '-DGL_SILENCE_DEPRECATION'
        $Env:OBJCXXFLAGS = '-DGL_SILENCE_DEPRECATION'
         
        gn gen ($INSDIR) ('--args=target_cpu=\"${{ matrix.arch }}\" is_debug=false mac_sdk_path=\"' + $Env:SDKROOT + '\" mac_sdk_min=\"${{ matrix.version }}\" mac_min_system_version=\"${{ matrix.version }}\" mac_deployment_target=\"${{ matrix.version }}\" angle_enable_metal=false angle_enable_swiftshader=false angle_enable_vulkan=false')
        autoninja -C ($INSDIR) libEGL libGLESv2
    - name: Upload Binary
      uses: actions/upload-artifact@v2
      with:
        name: angle-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
        path: output/
  freetype2:
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - OS: macos-latest
            version: '10.10'
            sdkroot: ../MacOSX-SDKs/MacOSX10.10.sdk
            arch: 'x86_64'
          - OS: macos-latest
            version: '10.10'
            sdkroot: ../MacOSX-SDKs/MacOSX10.10.sdk
            arch: 'i386'
            cmakeflags: -DCMAKE_ASM_FLAGS="--target=i386-apple-darwin" -DCMAKE_C_FLAGS="--target=i386-apple-darwin" -DCMAKE_CXX_FLAGS="--target=i386-apple-darwin"
          - OS: macos-latest
            deps: sudo xcode-select --switch /Applications/Xcode_12.2.app/Contents/Developer
            sdkroot: /Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk
            version: '11.0'
            arch: 'arm64'
            cmakeflags: -DCMAKE_ASM_FLAGS="--target=arm64-apple-darwin" -DCMAKE_C_FLAGS="--target=arm64-apple-darwin" -DCMAKE_CXX_FLAGS="--target=arm64-apple-darwin"
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.version }}
      cache-name: cache-freetype2-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}-v2
      CC: clang
      CXX: clang++
    steps:
    - name: Cache freetype2
      id: cache
      uses: actions/cache@v2
      with:
        path: output
        key: ${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: ${{ steps.cache.outputs.cache-hit != 'true' && startsWith(matrix.OS, 'macOS') && matrix.sdkroot != '' && !startsWith(matrix.sdkroot, '/') }}
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Install Deps
      if: ${{ steps.cache.outputs.cache-hit != 'true' && matrix.deps != '' }}
      run: ${{ matrix.deps }}
    - name: Build freetype
      if: steps.cache.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        if ('${{ matrix.sdkroot }}' -ne '') {
          if ('${{ matrix.sdkroot }}'.StartsWith('/')) {
            $Env:SDKROOT = '${{ matrix.sdkroot }}'
          } else {
            $Env:SDKROOT = '${{ github.workspace }}/${{ matrix.sdkroot }}'
          }
        }
        $INSDIR = (Get-Location).ToString() + "/output"
        git clone git://git.savannah.gnu.org/freetype/freetype2.git freetype2
        mkdir output
        mkdir build
        pushd build
        cmake ../freetype2 -DCMAKE_BUILD_TYPE=Release ('-DCMAKE_INSTALL_PREFIX=' + $INSDIR) ${{ matrix.cmakeflags }}
        make install -j4
    - name: Upload Binary
      uses: actions/upload-artifact@v2
      with:
        name: freetype2-${{ matrix.OS }}-${{ matrix.version }}-${{ matrix.arch }}
        path: output/
  build:
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        include:
          - AppImage: true
            OS: ubuntu-latest
          - AppImage: false
            OS: ubuntu-latest
    steps:
    - name: Installing Ubuntu dependencies
      shell: pwsh
      env:
        DEBIAN_FRONTEND: noninteractive
      run: sudo apt-get install -y libpng-dev libx11-dev libxi-dev libcurl4-openssl-dev libudev-dev libevdev-dev libegl1-mesa-dev libpulse-dev
    - name: Cloning mcpelauncher ${{ github.event.inputs.mcpelauncher-manifest-repo }}/${{ github.event.inputs.mcpelauncher-manifest-ref }}
      shell: pwsh
      run: git clone --recursive ${{ github.event.inputs.mcpelauncher-manifest-repo }} -b ${{ github.event.inputs.mcpelauncher-manifest-ref }} mcpelauncher
    - name: Building mcpelauncher ${{ github.event.inputs.mcpelauncher-manifest-repo }}/${{ github.event.inputs.mcpelauncher-manifest-ref }}
      shell: pwsh
      env:
        CC: clang
        CXX: clang++
      run: |
        mkdir output
        mkdir build
        $INSDIR = (Get-Location).ToString() + "/output"
        pushd build
        cmake ../mcpelauncher -DCMAKE_BUILD_TYPE=Release -DBUILD_WEBVIEW=OFF ('-DCMAKE_INSTALL_PREFIX=' + $INSDIR)
        make install -j12
        popd
        popd
    - name: Upload Binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.OS }}-Binary
        path: output/
    - name: Building AppImage Binary
      shell: pwsh
      if: ${{ matrix.AppImage }}
      env:
        ARCH: x86_64
        BUILD_NUM: ${GITHUB_RUN_NUMBER}
        OUTPUT: Minecraft_Bedrock_Launcher-x86_64-build-0.AppImage
      run: |
        curl -L https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage --output linuxdeploy.AppImage
        chmod +x linuxdeploy.AppImage
        curl -L https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage --output linuxdeploy-plugin-qt.AppImage
        chmod +x linuxdeploy-plugin-qt.AppImage
        $INSDIR = (Get-Location).ToString() + "/output"
        # ./linuxdeploy-plugin-qt.AppImage --appdir $INSDIR
        ./linuxdeploy.AppImage --appdir ($INSDIR) --output appimage
    - name: Upload AppImage Binary
      if: ${{ matrix.AppImage }}
      uses: actions/upload-artifact@v2
      with:
        name: AppImage
        path: Minecraft_Bedrock_Launcher-*.AppImage
