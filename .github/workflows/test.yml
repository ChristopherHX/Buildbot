name: Test Build
on:
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    # services:
    #   qemu:
    #     image: multiarch/qemu-user-static
    #     
    #     options: --privileged -- --reset -p yes"
    steps:
    #- run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - uses: actions/checkout@v2
    - run: |
              apt-get update
              apt-get install -y lsb-release sudo curl cmake make clang qemu-user
              sudo cp ldd /usr/bin/ldd
              sudo chmod +x /usr/bin/ldd
              # sudo dpkg --add-architecture armhf
              sudo dpkg --add-architecture arm64
              # sudo dpkg --add-architecture i386
              sudo bash -c "echo 'deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ '$(lsb_release -c -s)' main universe multiverse restricted' > /etc/apt/sources.list"
              sudo bash -c "echo 'deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ '$(lsb_release -c -s)-updates' main universe multiverse restricted' >> /etc/apt/sources.list"
              sudo bash -c "echo 'deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ '$(lsb_release -c -s)-backports' main universe multiverse restricted' >> /etc/apt/sources.list"
              sudo bash -c "echo 'deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ '$(lsb_release -c -s)-security' main universe multiverse restricted' >> /etc/apt/sources.list"
              sudo bash -c "echo 'deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ '$(lsb_release -c -s)' main universe multiverse restricted' >> /etc/apt/sources.list"
              sudo bash -c "echo 'deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ '$(lsb_release -c -s)-updates' main universe multiverse restricted' >> /etc/apt/sources.list"
              sudo bash -c "echo 'deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ '$(lsb_release -c -s)-backports' main universe multiverse restricted' >> /etc/apt/sources.list"
              sudo bash -c "echo 'deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ '$(lsb_release -c -s)-security' main universe multiverse restricted' >> /etc/apt/sources.list"
              sudo apt-get update -y
              # sudo apt remove '*-dev'
              sudo apt-get install -o APT::Immediate-Configure=false -y libc6:arm64 || echo $?
              ldd -v /lib/aarch64-linux-gnu/libdl.so.2
              sudo apt-get install -y qttools5-dev g++-aarch64-linux-gnu libstdc++-8-dev:arm64 libssl-dev:arm64 libcurl4-openssl-dev:arm64 libuv1-dev:arm64 libzip-dev:arm64 libprotobuf-dev:arm64 protobuf-compiler qtbase5-dev:arm64 qtwebengine5-dev:arm64 qtdeclarative5-dev:arm64 libqt5svg5-dev:arm64 qml-module-qtquick2:arm64 qml-module-qtquick-layouts:arm64 qml-module-qtquick-controls:arm64 qml-module-qtquick-controls2:arm64 qml-module-qtquick-window2:arm64 qml-module-qtquick-dialogs:arm64 qml-module-qt-labs-settings:arm64 qml-module-qt-labs-folderlistmodel:arm64
              curl -L https://github.com/ChristopherHX/Buildbot/releases/download/v0.0.0/mcpelauncher-ui-qt --output mcpelauncher-ui-qt
              chmod +x mcpelauncher-ui-qt
              ldd -v mcpelauncher-ui-qt || echo $?
              ./mcpelauncher-ui-qt || echo $?
    - name: Cloning mcpelauncher-ui ${{ github.event.inputs.mcpelauncher-ui-manifest-repo }}/${{ github.event.inputs.mcpelauncher-ui-manifest-ref }}
      shell: pwsh
      run: git clone --recursive ${{ github.event.inputs.mcpelauncher-ui-manifest-repo }} -b ${{ github.event.inputs.mcpelauncher-ui-manifest-ref }} mcpelauncher-ui
    - name: Building AppImage Binary
      shell: pwsh
      env:
        ARCH: ${{ matrix.linuxdeployarch }}
        BUILD_NUM: ${GITHUB_RUN_NUMBER}
        OUTPUT: Minecraft_Bedrock_Launcher-${{ matrix.arch }}-build-0.AppImage
        QMAKE: /usr/bin/${{ matrix.triple }}-qmake
        NO_STRIP: "1"
        # PATCHELF: 
      run: |
        curl -L https://github.com/ChristopherHX/Buildbot/releases/download/v0.0.0/mcpelauncher-ui-ubuntu-latest--arm64.zip --output x.zip
        mkdir usr
        pushd usr
        unzip ../x.zip
        popd
        curl -L https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-${{ matrix.linuxdeploytoolarch }}.AppImage --output linuxdeploy.AppImage
        chmod +x linuxdeploy.AppImage
        curl -L https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-${{ matrix.linuxdeploytoolarch }}.AppImage --output linuxdeploy-plugin-qt.AppImage
        chmod +x linuxdeploy-plugin-qt.AppImage
        curl -L https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage --output appimagetool.AppImage
        chmod +x appimagetool.AppImage
        curl -L https://github.com/AppImage/AppImageKit/releases/download/continuous/runtime-${{ matrix.appimagetoolruntimearch }} --output runtime
        $Env:PATH='/usr/lib/${{ matrix.triple }}/qt5/bin/:' + $Env:PATH
        # $INSDIR = (Get-Location).ToString() + "/output"
        ./linuxdeploy.AppImage --appdir $PWD/appdir -i $PWD/appdir/usr/share/pixmaps/mcpelauncher-ui-qt.png -d $PWD/appdir/usr/share/applications/mcpelauncher-ui-qt.desktop
        $Env:QML_SOURCES_PATHS='mcpelauncher-ui/mcpelauncher-ui-qt/qml/'
        ./linuxdeploy-plugin-qt.AppImage --appdir $PWD/appdir
        mkdir -p $PWD/appdir/usr/lib/
        cp -r /usr/lib/${{ matrix.triple }}/nss $PWD/appdir/usr/lib/
        ./appimagetool.AppImage --comp xz --runtime-file runtime $PWD/appdir $OUTPUT
